import unittest
from UnitTest import Hotel, Customer, Reservation, HotelManager, CustomerManager, ReservationManager

class TestHotelManagementSystem(unittest.TestCase):
    def setUp(self):
        self.hotel_manager = HotelManager("test_hotels.json")
        self.customer_manager = CustomerManager("test_customers.json")
        self.reservation_manager = ReservationManager("test_reservations.json")

    def tearDown(self):
        del self.hotel_manager
        del self.customer_manager
        del self.reservation_manager

    # Pruebas positivas
    def test_create_hotel(self):
        hotel = Hotel("Test Hotel", "Test Location", 10)
        self.hotel_manager.create_hotel(hotel)
        hotels = self.hotel_manager.get_hotel_data()
        self.assertIn("Test Hotel", hotels)

    def test_create_customer(self):
        customer = Customer("Test Customer", "test@example.com")
        self.customer_manager.create_customer(customer)
        customers = self.customer_manager.get_customer_data()
        self.assertIn("Test Customer", customers)

    def test_create_reservation(self):
        hotel = Hotel("Test Hotel", "Test Location", 10)
        customer = Customer("Test Customer", "test@example.com")
        self.hotel_manager.create_hotel(hotel)
        self.customer_manager.create_customer(customer)
        reservation = Reservation(customer.name, hotel.name)
        self.reservation_manager.create_reservation(reservation)
        reservations = self.reservation_manager.get_reservation_data()
        self.assertTrue(reservations)

    def test_cancel_reservation(self):
        hotel = Hotel("Test Hotel", "Test Location", 10)
        customer = Customer("Test Customer", "test@example.com")
        self.hotel_manager.create_hotel(hotel)
        self.customer_manager.create_customer(customer)
        reservation = Reservation(customer.name, hotel.name)
        self.reservation_manager.create_reservation(reservation)
        self.reservation_manager.cancel_reservation(customer.name, hotel.name)
        reservations = self.reservation_manager.get_reservation_data()
        self.assertFalse(reservations)

    def test_modify_hotel_info(self):
        hotel = Hotel("Test Hotel", "Test Location", 10)
        self.hotel_manager.create_hotel(hotel)
        new_info = {"name": "New Name", "location": "New Location", "rooms": 20}
        self.hotel_manager.modify_hotel_info("Test Hotel", new_info)
        hotels = self.hotel_manager.get_hotel_data()
        self.assertEqual(hotels["New Name"], new_info)

    # Pruebas negativas
    def test_create_existing_hotel(self):
        hotel = Hotel("Test Hotel", "Test Location", 10)
        self.hotel_manager.create_hotel(hotel)
        with self.assertRaises(KeyError):
            self.hotel_manager.create_hotel(hotel)

    def test_create_existing_customer(self):
        customer = Customer("Test Customer", "test@example.com")
        self.customer_manager.create_customer(customer)
        with self.assertRaises(KeyError):
            self.customer_manager.create_customer(customer)

    def test_modify_nonexistent_hotel(self):
        new_info = {"name": "New Name", "location": "New Location", "rooms": 20}
        with self.assertRaises(KeyError):
            self.hotel_manager.modify_hotel_info("Nonexistent Hotel", new_info)

    def test_cancel_nonexistent_reservation(self):
        with self.assertRaises(ValueError):
            self.reservation_manager.cancel_reservation("Nonexistent Customer", "Nonexistent Hotel")

    def test_cancel_reservation_invalid_customer(self):
        hotel = Hotel("Test Hotel", "Test Location", 10)
        self.hotel_manager.create_hotel(hotel)
        with self.assertRaises(ValueError):
            self.reservation_manager.cancel_reservation("Nonexistent Customer", hotel.name)


if __name__ == '__main__':
    unittest.main()
